import os
import time
from string import Template
import requests
from dotenv import load_dotenv

load_dotenv()


class Task:
    def __init__(self) -> None:
        self.__task_id = None
        self.__task_stage = None
        self.__task = None
        self.__server_address = None
        self.__server_port = None
        self.__requests_address = Template("http://$address:$port/$action/")


    def start(self, stage: int, task_id: int) -> None:
        self.__task_stage = stage
        self.__server_address = os.getenv("SERVER_ADDRESS", "127.0.0.1")
        self.__server_port = os.getenv("SERVER_PORT", "8000")

        url = self.__requests_address.substitute(
            address=self.__server_address,
            port=self.__server_port,
            action="start_task"
        )
        response = requests.get(url, params={'task_stage': self.__task_stage, 'task_id': task_id})

        self.__task_id, self.__task = response.json()


    def getTask(self) -> str:
        return self.__task


    def checkCargoDemand(self) -> list:
        if not self.__task_id:
            raise Exception("Task not started. Call start(task_id) first.")

        url = self.__requests_address.substitute(
            address=self.__server_address,
            port=self.__server_port,
            action="check_cargo_demand"
        )
        response = requests.get(url, params={'task_id': self.__task_id})
        if response.status_code == 200:
            return response.json()
        else:
            raise Exception(f"Error checking cargo demand: {response.text}")


    def stop(self) -> None:
        url = self.__requests_address.substitute(
            address=self.__server_address,
            port=self.__server_port,
            action="stop_task"
        )
        requests.get(url, params={'task_id': self.__task_id})
        print("Task stopped.")


if __name__ == "__main__":
    task = Task()

    # task.start(3, 100)
    # print(task.getTask())
    # start = time.time()
    # try:
    #     while True:
    #         print(time.time() - start)
    #         print(task.checkCargoDemand())
    #         time.sleep(2)
    # except KeyboardInterrupt:
    #     task.stop()

    task.start(2, 51)
    print(task.getTask())

    task.stop()